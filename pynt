#!/usr/bin/env python
# Copyright 2017 Daniel Hilst Selli
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from string import Formatter


class SafeFormatter(Formatter):
    def get_value(self, key, args, kwargs):
        try:
            return super(SafeFormatter, self).get_value(key, args, kwargs)
        except (IndexError, KeyError):
            return '{{{}}}'.format(key)


if __name__ == '__main__':
    import sys
    import os
    import logging

    log = logging.getLogger('')
    log.setLevel(os.environ.get('PYNT_LOGLEVEL', logging.ERROR))
    log.addHandler(logging.StreamHandler())

    def usage():
        print "{} <template> [arg] [arg] [arg]".format(sys.argv[0])
        print "{} - [arg] [arg] [arg]".format(sys.argv[0])
        sys.exit(1)

    args = type('', (), {})

    try:
        args.tokens = sys.argv[2:]
        if sys.argv[1] == '-':
            args.template = sys.stdin.read().rstrip()
        else:
            args.template = sys.argv[1]
    except IndexError:
        usage()

    args.args = tuple(arg for arg in args.tokens if '=' not in arg)
    args.kwargs = dict((arg.split('=') for arg in args.tokens if '=' in arg))

    log.debug('Template: %s', args.template)
    log.debug('args: %s', args.args)
    log.debug('kwargs: %s', args.kwargs)

    print SafeFormatter().vformat(args.template, args.args, args.kwargs)

